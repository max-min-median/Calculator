[[["cpd", 4], [" = "], ["cpd(prin, I, t) = prin(1 + I)^t", 4]], [["gcd", 4], [" = "], ["gcd(a, b) = a ? gcd(b % a, a) : b", 4]], [["summation", 4], [" = "], ["summation(f, l, u) = l <= u ? f(l) + summation(f, l + 1, u) : 0", 4]], [["binCoeff", 4], [" = "], ["binCoeff(c, n, r, acc = 1) = r ? binCoeff(c, n, r - 1, acc * c * (n - r + 1) / r) : acc", 4]], [["normpdf", 4], [" = "], ["normpdf(x, mu = 0, sigma = 1) = 1/(sqrt(2pi) * sigma) e^(-1/2 ((x - mu)/sigma)^2)", 4]], [["normcdf", 4], [" = "], ["normcdf(a, b, mu = 0, sigma = 1) = integrate(normpdf, (a - mu)/sigma, (b - mu)/sigma)", 4]], [["gym", 4], [" = "], ["gym(a, b = 0, c = 0, d = 0, q = 0) = (45 + 2(45a + 25b + 10c + 5d + 2.5q)) lbToKg", 4]], [["vecSum", 4], [" = "], ["vecSum((a, b, c, d), (e, f, g, h)) = (a + e, b + f, c + g, d + h)", 4]], [["sumOfRoots", 4], [" = "], ["sumOfRoots(a, b, c) = q = quad(a, b, c); q @ 0 + q @ 1", 4]], [["map", 4], [" = "], ["map(f, v) = v$ ? (f(v @ 0):) <+> map(f, 1 </ v) : ()", 4]], [["reduce", 4], [" = "], ["reduce(f, v, a = 0) = v$ ? reduce(f, 1 </ v, f(a, v @ 0)) : a", 4]], [["transpose", 4], [" = "], ["transpose(m, result = (), col = (), r = 0, c = 0) = result$ == (m @ 0)$ ? result : r == m$ ? transpose(m, result <+> (col:), (), 0, c + 1) : transpose(m, result, col <+> (m @ r @ c:), r + 1, c)", 4]], [["matrixMult", 4], [" = "], ["matrixMult(A, B) = B = transpose(B); (helper(result = (), row = (), r = 0, c = 0) = r == A$ ? result : c == B$ ? helper(result <+> (row:), (), r + 1, 0) : helper(result, row <+> (dotProduct(A @ r, B @ c):), r, c + 1))()", 4]], [["filter", 4], [" = "], ["filter(pred, v) = v$ ? (pred(v @ 0) ? (v @ 0:) : ()) <+> filter(pred, 1 </ v) : ()", 4]], [["sum", 4], [" = "], ["sum(v) = reduce(f(x, y) = x + y, v, 0)", 4]], [["fibSequence", 4], [" = "], ["fibSequence(n, result = (1, 1)) = result$ >= n ? n /> result : fibSequence(n, result <+> (sum(result </ 2):))", 4]], [["norm", 4], [" = "], ["norm(v) = sqrt(reduce(f(prev, x) = prev + x^2, v))", 4]], [["stdDev", 4], [" = "], ["stdDev(v) = sqrt(var(v))", 4]], [["var", 4], [" = "], ["var(v) = sumSq = sum(map(square(x) = x^2, v)); mean = sum(v) / v$; sumSq / v$ - mean^2", 4]], [["delta", 4], [" = "], ["1/100000000000000000000", 4]], [["toDeg", 4], [" = "], ["159121869262581/2777200530560", 4]], [["deg", 4], [" = "], ["89285273844/5115669363931", 4]], [["lbToKg", 4], [" = "], ["50000/110231", 4]], [["ans", 4], [" = "], ["6", 4]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad, (x, y), endX, stepSize, thisGrad = grad(x, y), thisRow = ((x, y, thisGrad):)) = x >= endX ? thisRow : thisRow <+> euler(grad, (x + stepSize, y + thisGrad * stepSize), endX, stepSize)"]], [["euler(grad, (x, y), endX, stepSize, thisGrad = grad(x, y), thisRow = ((x, y, thisGrad):)) = x >= endX ? thisRow : thisRow <+> euler(grad, (x + stepSize, y + thisGrad * stepSize), endX, stepSize)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad(t, y) = 3-2t-0.5y, (0, 1), 1, 0.2)"]], [["((0, 1, 5/2 = 2.5), (1/5 = 0.2, 3/2 = 1.5, 37/20 = 1.85), (2/5 = 0.4, 187/100 = 1.87, 253/200 = 1.265), (3/5 = 0.6, 2123/1000 = 2.123, 1477/2000 = 0.7385), (4/5 = 0.8, 22707/10000 = 2.2707, 5293/20000 = 0.26465), (1, 232363/100000 = 2.32363, -32363/200000 = -0.161815))", 9]], [], [["\u2666", 7], [">", 8], [" "], ["frac 0"]], [["frac_max_length", 4], [" -> "], ["0", 4]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad(t, y) = 3-2t-0.5y, (0, 1), 1, 0.2)"]], [["((0, 1, 2.5), (0.2, 1.5, 1.85), (0.4, 1.87, 1.265), (0.6, 2.123, 0.7385), (0.8, 2.2707, 0.26465), (1, 2.32363, -0.161815))", 9]], [], [["\u2666", 7], [">", 8], [" "], ["grad"]], [["grad(t, y) = 3 - 2t - 0.5y", 9]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad(t, y) = ysint-1, (0, 2), 3, 0.5)"]], [["((0, 2, -1), (0.5, 1.5, -0.2808616920936954995900681), (1, 1.3595691539531522502049659, 0.1440379948913976839130367), (1.5, 1.4315881513988510921614843, 0.4280020039021200167278512), (2, 1.6455891533499111005254099, 0.4963299827533262830998380), (2.5, 1.8937541447265742420753289, 0.1333591034002672219119404), (3, 1.9604336964267078530312991, -0.7233435809594276968487984))", 9]], [], [["\u2666", 7], [">", 8], [" "], ["disp 5"]], [["final_precision", 4], [" -> "], ["5", 4]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad(t, y) = ysint-1, (0, 2), 3, 0.5)"]], [["((0, 2, -1), (0.5, 1.5, -0.28086), (1, 1.35957, 0.14404), (1.5, 1.43159, 0.42800), (2, 1.64559, 0.49633), (2.5, 1.89375, 0.13336), (3, 1.96043, -0.72334))", 9]], [], [["\u2666", 7], [">", 8], [" "], ["prec"]], [["working_precision", 4], [" -> "], ["30", 4]], [], [["\u2666", 7], [">", 8], [" "], ["disp 25"]], [["final_precision", 4], [" -> "], ["25", 4]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad(t, y) = ysint-1, (0, 2), 3, 0.5)"]], [["((0, 2, -1), (0.5, 1.5, -0.2808616920936954995900681), (1, 1.3595691539531522502049659, 0.1440379948913976839130367), (1.5, 1.4315881513988510921614843, 0.4280020039021200167278512), (2, 1.6455891533499111005254099, 0.4963299827533262830998380), (2.5, 1.8937541447265742420753289, 0.1333591034002672219119404), (3, 1.9604336964267078530312991, -0.7233435809594276968487984))", 9]], [], [["\u2666", 7], [">", 8], [" "], ["euler(grad(x, y) = (yx^2+2y)/(x^2-4), (0, 2), 0.4, 0.1)"]], [["((0, 2, -1), (0.1, 1.9, -0.9(571428)*), (0.2, 1.80(428571)*, -0.92(948051)*), (0.3, 1.711(337662)*, -0.9147559371574716843259043), (0.4, 1.6198620686219151692297472, -0.9111724135998272826917328))", 9]], [], [["\u2666", 7], [">", 8], [" "], ["vars"]], [], [["User-defined Variables", 4]], [["\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"]], [["area", 4], [" = "], ["area(a, b, c) = a * b * sin c / 2", 4]], [["binomcdf", 4], [" = "], ["binomcdf(n, p, a, b) = binompdf(n, p, a) + ((b > a) && binomcdf(n, p, a + 1, b))", 4]], [["binompdf", 4], [" = "], ["binompdf(n, p, x) = nCx p^x (1 - p)^(n - x)", 4]], [["collatz", 4], [" = "], ["collatz(n) = n > 1 ? 1 + (n % 2 ? collatz(3n + 1) : collatz(n/2)) : 0", 4]], [["cosAngle", 4], [" = "], ["cosAngle(a, b, c) = acos((b^2 + c^2 - a^2) / 2bc)", 4]], [["cosRule", 4], [" = "], ["cosRule(a, b, angle) = sqrt(a^2 + b^2 - 2ab cos angle)", 4]], [["crossProduct", 4], [" = "], ["crossProduct((x1, y1, z1), (x2, y2, z2)) = (y1z2 - y2z1, z1x2 - z2x1, x1y2 - y1x2)", 4]], [["dotProduct", 4], [" = "], ["dotProduct(u, v) = u$ ? u @ 0 conj(v @ 0) + dotProduct(1 </ u, 1 </ v) : 0", 4]], [["grad", 4], [" = "], ["grad(x, y) = (yx^2 + 2y)/(x^2 - 4)", 4]], [["hero", 4], [" = "], ["hero(a, b, c) = s = (a + b + c) / 2; sqrt(s(s - a)(s - b)(s - c))", 4]], [["poisscdf", 4], [" = "], ["poisscdf(lambda, a, b) = poisspdf(lambda, a) + ((b > a) && poisscdf(lambda, a + 1, b))", 4]], [["poisspdf", 4], [" = "], ["poisspdf(lambda, x) = e^-lambda lambda^x / x!", 4]], [["polar", 4], [" = "], ["polar(x) = (abs(x), arg(x))", 4]], [["quad", 4], [" = "], ["quad(a, b, c) = sqrtD = sqrt(b^2 - 4ac); ((-b - sqrtD)/2a, (-b + sqrtD)/2a)", 4]], [["simul", 4], [" = "], ["simul(a, b, c, d, e, f) = ((bf - ce)/(bd - ae), (cd - af)/(bd - ae))", 4]], [["fib", 4], [" = "], ["fib(n, a = 1, b = 0) = n == 0 ? b : fib(n - 1, b, a + b)", 4]], [["luhn", 4], [" = "], ["luhn(n, q = 1) = d = n % 10; n ? (q ? d : 2d > 9 ? 2d - 9 : 2d) + luhn(n // 10, 1 - q) : 0", 4]], [["reverse", 4], [" = "], ["reverse(n, acc = 0) = n == 0 ? acc : reverse(n // 10, 10acc + n % 10)", 4]], [["ceil", 4], [" = "], ["ceil(n) = n // 1 + (n % 1 > 0)", 4]], [["floor", 4], [" = "], ["floor(n) = n // 1", 4]], [["parseBin", 4], [" = "], ["parseBin(n) = radixToDecHelper(reverse(n), 2, 0)", 4]], [["radixToDecHelper", 4], [" = "], ["radixToDecHelper(n, radix, acc) = n ? radixToDecHelper(n // 10, radix, radix * acc + (n % 10 > 0)) : acc", 4]], [["bin", 4], [" = "], ["bin(n, bits = 32) = binHelper(n + (n < 0) * 2^bits, bits - 1, 0)", 4]], [["binHelper", 4], [" = "], ["binHelper(n, p, res) = c = n // 2^p; p ? binHelper(n - c * 2^p, p - 1, 10res + c) : 10res + c", 4]], [["proj", 4], [" = "], ["proj(u, v) = scalarMult(1/(mag(v))^2 * dotProduct(u, v), v)", 4]], [["scalarMult", 4], [" = "], ["scalarMult(k, (a, b, c, d)) = (ka, kb, kc, kd)", 4]], [["mag", 4], [" = "], ["mag((a, b, c)) = sqrt(a^2 + b^2 + c^2)", 4]], [["root", 4], [" = "], ["root(f, a, b, inc = (b - a)/1000, delta = delta, h = f(b)) = f(a) * h < 0 ? rootFind(f, a, b, delta, f(a), h) : a + inc < b ? root(f, a + inc, b, inc, delta) : ()", 4]], [["rootFind", 4], [" = "], ["rootFind(f, a, b, delta, l = f(a), h = f(b), m = f((a + b)/2)) = b - a <* delta ? (a + b)/2 : m * l <* 0 ? rootFind(f, a, (a + b)/2, delta, l, m) : rootFind(f, (a + b)/2, b, delta, m, h)", 4]], [["integHelper", 4], [" = "], ["integHelper(f, a, b, dx) = a >= b ? f(b) : f(a) + integHelper(f, a + dx, b, dx)", 4]], [["integrate", 4], [" = "], ["integrate(f, a, b, dx = (b - a)/1000) = dx/2 * (f(a) + 2 * integHelper(f, a + dx, b - dx, dx))", 4]], [["gini", 4], [" = "], ["gini(a, b, c) = tot = a + b + c; (a(tot - a) + b(tot - b) + c(tot - c)) / tot^2", 4]], [["log", 4], [" = "], ["log(a, b) = ln(b)/ln(a)", 4]], [["cpd", 4], [" = "], ["cpd(prin, I, t) = prin(1 + I)^t", 4]], [["gcd", 4], [" = "], ["gcd(a, b) = a ? gcd(b % a, a) : b", 4]], [["summation", 4], [" = "], ["summation(f, l, u) = l <= u ? f(l) + summation(f, l + 1, u) : 0", 4]], [["binCoeff", 4], [" = "], ["binCoeff(c, n, r, acc = 1) = r ? binCoeff(c, n, r - 1, acc * c * (n - r + 1) / r) : acc", 4]], [["normpdf", 4], [" = "], ["normpdf(x, mu = 0, sigma = 1) = 1/(sqrt(2pi) * sigma) e^(-1/2 ((x - mu)/sigma)^2)", 4]], [["normcdf", 4], [" = "], ["normcdf(a, b, mu = 0, sigma = 1) = integrate(normpdf, (a - mu)/sigma, (b - mu)/sigma)", 4]], [["gym", 4], [" = "], ["gym(a, b = 0, c = 0, d = 0, q = 0) = (45 + 2(45a + 25b + 10c + 5d + 2.5q)) lbToKg", 4]], [["vecSum", 4], [" = "], ["vecSum((a, b, c, d), (e, f, g, h)) = (a + e, b + f, c + g, d + h)", 4]], [["sumOfRoots", 4], [" = "], ["sumOfRoots(a, b, c) = q = quad(a, b, c); q @ 0 + q @ 1", 4]], [["map", 4], [" = "], ["map(f, v) = v$ ? (f(v @ 0):) <+> map(f, 1 </ v) : ()", 4]], [["reduce", 4], [" = "], ["reduce(f, v, a = 0) = v$ ? reduce(f, 1 </ v, f(a, v @ 0)) : a", 4]], [["transpose", 4], [" = "], ["transpose(m, result = (), col = (), r = 0, c = 0) = result$ == (m @ 0)$ ? result : r == m$ ? transpose(m, result <+> (col:), (), 0, c + 1) : transpose(m, result, col <+> (m @ r @ c:), r + 1, c)", 4]], [["matrixMult", 4], [" = "], ["matrixMult(A, B) = B = transpose(B); (helper(result = (), row = (), r = 0, c = 0) = r == A$ ? result : c == B$ ? helper(result <+> (row:), (), r + 1, 0) : helper(result, row <+> (dotProduct(A @ r, B @ c):), r, c + 1))()", 4]], [["filter", 4], [" = "], ["filter(pred, v) = v$ ? (pred(v @ 0) ? (v @ 0:) : ()) <+> filter(pred, 1 </ v) : ()", 4]], [["sum", 4], [" = "], ["sum(v) = reduce(f(x, y) = x + y, v, 0)", 4]], [["fibSequence", 4], [" = "], ["fibSequence(n, result = (1, 1)) = result$ >= n ? n /> result : fibSequence(n, result <+> (sum(result </ 2):))", 4]], [["norm", 4], [" = "], ["norm(v) = sqrt(reduce(f(prev, x) = prev + x^2, v))", 4]], [["stdDev", 4], [" = "], ["stdDev(v) = sqrt(var(v))", 4]], [["var", 4], [" = "], ["var(v) = sumSq = sum(map(square(x) = x^2, v)); mean = sum(v) / v$; sumSq / v$ - mean^2", 4]], [["euler", 4], [" = "], ["euler(grad, (x, y), endX, stepSize, thisGrad = grad(x, y), thisRow = ((x, y, thisGrad):)) = x >= endX ? thisRow : thisRow <+> euler(grad, (x + stepSize, y + thisGrad * stepSize), endX, stepSize)", 4]], [["delta", 4], [" = "], ["1/100000000000000000000", 4]], [["toDeg", 4], [" = "], ["159121869262581/2777200530560", 4]], [["deg", 4], [" = "], ["89285273844/5115669363931", 4]], [["lbToKg", 4], [" = "], ["50000/110231", 4]], [["ans", 4], [" = "], ["((0, 2, -1), (1/10, 19/10, -67/70), (1/5, 1263/700, -7157/7700), (3/10, 131773/77000, -2503687/2737000), (2/5, 487691873/301070000, -4389226857/4817120000))", 4]], [], [["\u2666", 7], [">", 8], [" "], ["proj"]], [["proj(u, v) = scalarMult(1/(mag(v))^2 * dotProduct(u, v), v)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["proj(u, v) = map((k = 1/norm(v)^2 * dotProduct(u, v); f(x) = kx), v)"]], [["proj(u, v) = map((k = 1/norm(v)^2 * dotProduct(u, v); f(x) = kx), v)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["frac"]], [["frac_max_length", 4], [" -> "], ["0", 4]], [], [["\u2666", 7], [">", 8], [" "], ["proj(u, v) = k = 1/norm(v)^2 * dotProduct(u, v); map(f(x) = kx, v)"]], [["proj(u, v) = k = 1/norm(v)^2 * dotProduct(u, v); map(f(x) = kx, v)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["proj((7, 5, 1), (1, 2, -3))"]], [["(1, 2, -3)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["proj((6, -2, 7), (2, 5, -1))"]], [["(-0.(3)*, -0.8(3)*, 0.1(6)*)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["frac 10"]], [["frac_max_length", 4], [" -> "], ["10", 4]], [], [["\u2666", 7], [">", 8], [" "], ["proj((6, -2, 7), (2, 5, -1))"]], [["(-1/3 = -0.(3)*, -5/6 = -0.8(3)*, 1/6 = 0.1(6)*)", 9]], [], [["\u2666", 7], [">", 8], [" "], ["vecSum"]], [["vecSum((a, b, c, d), (e, f, g, h)) = (a + e, b + f, c + g, d + h)", 9]]]
["transpose(m, result=(), col=(), r=0, c=0) = (m@0$ == c) ? result : c == (m@0)$ ? transpose(m, result <+> (col:), r+1, 0) : transpose(m, result, col <+> (m@r@c:), r, c+1)", "m", "m@0$", "transpose(m, result=(), col=(), r=0, c=0) = result$ == c ? result : r == m$ ? transpose(m, result <+> (col:), 0, c + 1) : transpose(m, result, col <+> (m@r@c:), r+1, c)", "transpose(m, result=(), col=(), r=0, c=0) = result$ == (m@0)$ ? result : r == m$ ? transpose(m, result <+> (col:), 0, c + 1) : transpose(m, result, col <+> (m@r@c:), r+1, c)", "transpose(((1, 2), (3, 4)))", "() <+> ((1, 2, 3):)", "col = (1, 2, 3)", "() <+> col", "() <+> (col)", "() <+> (col:)", "() <+> (col:) <+> (col:)", "vars", "transpose", "transpose(((1, 2), (3, 4)))", "transpose(m, result=(), col=(), r=0, c=0) = result$ == (m@0)$ ? result : r == m$ ? transpose(m, result <+> (col:), (), 0, c + 1) : transpose(m, result, col <+> (m@r@c:), r+1, c)", "transpose(((1, 2), (3, 4)))", "transpose(((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))", "vars", "transpose", "A = ((1, 2), (3, 4))", "B = ((4, -1), (2, 6))", "matrixMult(A, B)", "B", "A = ((1, 2, -3), (-7, 0, 2)); B = ((5:), (1:), (8:))", "matrixMult", "matrixMult(A, B)", "matrixMult", "transpose", "matrixMult(A, B) = B = transpose(B); ( helper(result=(), row=(), r=0, c=0) = r == A$ ? result : c == B$ ? helper(result <+> (row:), (), r+1, 0) : helper(result, row <+> (dotProduct(A@r, B@c):), r, c+1) ); helper()", "A", "B", "A = ((1, 2), (3, 4))", "matrixMult", "matrixMult(A, A)", "matrixMult", "matrixMult(A, B)", "dotProduct", "transpose", "matrixMult", "matrixMult(A, B) = B = transpose(B); ( helper(result=(), row=(), r=0, c=0) = r == A$ ? result : c == B$ ? helper(result <+> (row:), (), r+1, 0) : helper(result, row <+> (dotProduct(A@r, B@c):), r, c+1) )()", "matrixMult(A, B)", "matrixMult", "dotProduct", "transpose", "matrixMult", "A = ((3, -1, 1), (-3, 5, 0))", "B = ((-4, 0, 1), (0, 1, -1), (0, 0, 0))", "matrixMult(A, B)", "vars", "map", "reduce", "vars", "dotProduct", "transpose", "matrixMult", "luhn", "vars", "del g", "vars", "proj", "filter", "filter", "map", "filter(pred, v) = v$ ? (pred(v @ 0) ? (v @ 0:) : ()) <+> filter(pred, 1 </ v) : ()", "filter(pred(x) = x % 2, [1, 2, 3, 4, 5, 6, 7])", "filter(pred(x) = x % 2 == 0, [1, 2, 3, 4, 5, 6, 7])", "sum", "sum(v) = reduce(f(x, y) = x + y, v)", "sum", "reduce", "sum(v) = reduce(f(x, y) = x + y, v, 0)", "sum([1, 3, 4, 7])", "fibSequence(n, result = (1, 1)) = result$ >= n ? n /> result : result <+> (sum(result </ 2):)", "fibSequence(n, result = (1, 1)) = result$ >= n ? n /> result : fibSequence(n, result <+> (sum(result </ 2):))", "fibSequence(10)", "fibSequence(50)", "fibSequence(0)", "fibSequence(1)", "fibSequence(2)", "collatz", "fibSequence", "fib", "fib(30)", "fib(1)", "fib(2)", "fib(3)", "vars", "vars", "vars", "fibSequence(100)", "vars", "vars", "e", "vars", "filter((pred(x) = x % 2), [1, 2, 3, 4, 5])", "pred", "del pred", "vars", "vars", "ans", "pred", "proj", "mag", "norm", "norm(v) = sqrt(reduce(f(prev, x) = prev + x^2, v)", "norm(v) = sqrt(reduce(f(prev, x) = prev + x^2, v))", "norm((1, 2, 3))", "norm(v) = sqrt(reduce(f(prev, x) = prev + x^2, v, 0))", "reduce", "reduce(f, v, a=0) = v$ ? reduce(f, 1 </ v, f(a, v@0)) : a", "norm(v) = sqrt(reduce(f(prev, x) = prev + x^2, v))", "norm((1, 2, 3))", "norm((1, 2, 3))^2", "norm((1, 2, 3, 4, 5))", "norm((1, 2, 3, 4, 5))^2", "stdDev(v) = sumSq = sum(map(square(x) = x^2, v)); mean = sum(v) / v$; sumSq / v$ - mean^2", "stdDev((1, 2, 3))", "stdDev((1, 2, 3, 4, 5)", "stdDev(v) = sumSq = sum(map(square(x) = x^2, v)); mean = sum(v) / v$; sqrt(sumSq / v$ - mean^2)", "stdDev((1, 4, 5, 7, 8))", "stdDev((1, 4, 5, 7, 8))^2", "var", "var(v) = sumSq = sum(map(square(x) = x^2, v)); mean = sum(v) / v$; sumSq / v$ - mean^2", "stdDev(v) = sqrt(var(v))", "stdDev((1, 4, 5, 7, 8))", "stdDev((1, 4, 5, 7, 8))^2", "var(v)", "var((1, 4, 5, 7, 8)", "var((1, 4, 5, 7, 8))", "var((1, 4, 5, 7, 8", "vars", "euler(grad, (x, y), endX, stepSize, thisGrad = grad(x, y), thisRow = ((x, y, thisGrad):)) = x >= endX ? thisRow : thisRow <+> euler(grad, (x + stepSize, y + thisGrad * stepSize), endX, stepSize)", "frac 0", "euler(grad(t, y) = 3-2t-0.5y, (0, 1), 1, 0.2)", "grad", "disp 5", "prec", "disp 25", "euler(grad(t, y) = ysint-1, (0, 2), 3, 0.5)", "euler(grad(x, y) = (yx^2+2y)/(x^2-4), (0, 2), 0.4, 0.1)", "vars", "proj", "proj(u, v) = map((k = 1/norm(v)^2 * dotProduct(u, v); f(x) = kx), v)", "frac", "proj(u, v) = k = 1/norm(v)^2 * dotProduct(u, v); map(f(x) = kx, v)", "proj((7, 5, 1), (1, 2, -3))", "frac 10", "proj((6, -2, 7), (2, 5, -1))", "vecSum"]
